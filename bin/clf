#!/usr/bin/env python

# clf queue list | while read queue; do clfq delete $queue; done

import logging
import optparse
import os
import sys

import clf.clparserutil

import clfcmd.creq
import clfcmd.spider_repo
import clfcmd.queue


_logger = logging.getLogger("CLF_%s" % __name__)


def usage(fmt="[queue|spider_repo|creq] ..."):
    print "usage: %s %s" % (os.path.split(sys.argv[0])[1], fmt)
    sys.exit(1)


class CommandLineParser(optparse.OptionParser):

    def __init__(self):
        optparse.OptionParser.__init__(
            self,
            "usage: %prog [options] [queue|spider_repo] ...",
            option_class=clf.clparserutil.Option)

        default = logging.ERROR
        fmt = (
            "logging level "
            "[DEBUG,INFO,WARNING,ERROR,CRITICAL,FATAL]"
            " - default = %s"
        )
        help = fmt % logging.getLevelName(default)
        self.add_option(
            "--log",
            action="store",
            dest="logging_level",
            default=default,
            type="logginglevel",
            help=help)


if __name__ == "__main__":

    clp = CommandLineParser()
    (clo, cla) = clp.parse_args()

    logging.basicConfig(level=clo.logging_level)

    args = cla
    if 0 == len(args):
        usage()

    commands = {
        clfcmd.queue.command_name: clfcmd.queue.doit,
        clfcmd.spider_repo.command_name: clfcmd.spider_repo.doit,
        clfcmd.creq.command_name: clfcmd.creq.doit,
    }
    command = commands.get(args[0].strip().lower(), None)
    if not command:
        usage()

    command(usage, args[1:])
