#!/usr/bin/env python
"""A very simple utility which builds on the capbilities of
Radon (https://pypi.python.org/pypi/radon) to compute some
CLF source code metrics. The purpose of these metrics is to
provide a high level sense of the size of CLF."""

import fnmatch
import os
import sys

import radon.raw

if __name__ == "__main__":

    if 1 != len(sys.argv):
        sys.exit("usage: %s" % os.path.split(sys.argv[0])[1])
        sys.exit(1)

    root_dir = os.path.join(
        os.path.split(sys.argv[0])[0],
        "../clf")

    number_source_files = 0
    number_lines_of_code = 0
    number_logical_lines_of_code = 0

    for root, dirnames, filenames in os.walk(root_dir):
        if not root.endswith("tests"):
            for filename in fnmatch.filter(filenames, "*.py"):
                if filename != "__init__.py":
                    source_file_name = os.path.join(root, filename)
                    with open(source_file_name, 'r') as f:
                        source_code = f.read()
                        # print "%s: %d" % (source_file_name, len(source_code))
                        scm = radon.raw.analyze(source_code)
                        # print "-- %s" % str(scm)
                        # print "-- %s" % scm.lloc
                        number_source_files += 1
                        number_lines_of_code += scm.loc
                        number_logical_lines_of_code += scm.lloc

    # :TODO: should we add clf cli & associated commands?
    # :TODO: like the above, what about test code?

    print "number source files = %d" % number_source_files
    print "number lines of code = %d" % number_lines_of_code
    print "number logical lines of code = %d" % number_logical_lines_of_code
